{"version":3,"sources":["Login.jsx","services.js","SendMessage.jsx","ChatDisplay.jsx","Logout.jsx","Chat.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Login","onLogin","setError","useState","username","setUsername","useEffect","className","onChange","e","target","value","placeholder","onClick","name","fetch","method","headers","body","JSON","stringify","catch","Promise","reject","error","then","res","ok","json","err","user","SendMessage","onSend","setUserState","message","setMessage","rows","cols","fetchMessage","messages","isLoggedIn","ChatDisplay","users","userList","Object","values","map","key","toString","messageList","uId","timestamp","Logout","onLogout","Chat","setUsers","setMessages","getUsers","getMessages","App","userState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.b726291a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchLogin } from './services';\n\nconst Login = ({ onLogin, setError }) => {\n    const [username, setUsername] = useState('');\n\n    const doLogin = () =>{\n        fetchLogin(username)\n        .then(user => {\n            onLogin(user);\n        })\n        .catch((err) =>{\n            setError(err.error);\n        });\n    };\n\n    useEffect(() => {\n        setError('');\n    }, []);\n\n    return (\n        <div className=\"login\">\n            <div className=\"auth\">\n                <input className=\"form-control\" onChange={ (e) => setUsername(e.target.value)} placeholder=\"Enter Username Here\"/>\n                <button className=\"btn btn-login\" onClick={ doLogin }>Login</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;","export const fetchLoginStatus = () =>{\n    return fetch('/session',{\n        method:'GET',\n      })\n      .catch((err) => Promise.reject({ error: 'Network Error' }))\n      .then((res) =>{\n        if(!res.ok){\n          return Promise.reject({ error: 'Invalid Login' });\n        }\n        return;\n    });\n}\n\nexport const fetchLogin = (name) =>{\n    return fetch('/session',{\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name }),\n    })\n    .catch(() => Promise.reject({ error: 'Network Error'}))\n    .then((res) => {\n        if(!res.ok){\n            return res.json().then(err => Promise.reject(err));\n        }\n        return res.json();\n    });\n}\n\nexport const fetchMessage = (message) =>{\n    return fetch('/messages',{\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({ message }),\n    })\n    .catch(() => Promise.reject({ error: 'Network Error'}))\n    .then((res) => {\n        if(!res.ok){\n            return res.json().then(err => Promise.reject(err));\n        }\n        return res.json();\n    });\n}\n\nexport const fetchLogout = () => {\n    return fetch('/session', {\n        method: 'DELETE',\n    })\n    .catch(() => Promise.reject({ error: 'Network Error'}))\n    .then((res) => {\n        if(!res.ok){\n            return Promise.reject({ error: 'Error logging out the user'})\n        }\n        return;\n    });\n}\n\nexport const fetchUsers = () =>{\n    return fetch('/users', {\n        method: 'GET',\n    })\n    .catch(() => Promise.reject( {error: 'Network Error'}))\n    .then((res) => {\n        if(!res.ok){\n            return res.json().then(err => Promise.reject(err));\n        }\n        return res.json();\n    });\n}\n\nexport const fetchMessages = () =>{\n    return fetch('/messages', {\n        method: 'GET',\n    })\n    .catch(() => Promise.reject( {error: 'Network Error'}))\n    .then((res) => {\n        if(!res.ok){\n            return res.json().then(err => Promise.reject(err));\n        }\n        return res.json();\n    });\n}","import React, { useState } from 'react';\nimport { fetchMessage} from './services';\n\nconst SendMessage = ({ onSend, setError, setUserState }) => {\n    const [message, setMessage] = useState('');\n\n    const sendMessage = (e) =>{\n        fetchMessage(message)\n        .then(messages =>{\n            onSend(messages);\n            setMessage('');\n        })\n        .catch(err =>{\n            setError(err.error);\n            if(err.error === 'Unauthorized user' || err.error === 'User not allowed'){\n                setUserState({\n                    isLoggedIn: false\n                });\n            }\n        })\n    }\n\n    const onInput = (e) => {\n        setError('');\n        setMessage(e.target.value);\n    };\n\n    return (\n        <div className=\"message\">\n            <textarea  rows=\"5\" cols=\"50\" className=\"form-control text-message\" value={ message } onChange={ onInput } placeholder=\"Enter Message Here\" ></textarea>            \n            <button className=\"btn btn-send\" onClick={ sendMessage }>Send Message</button>\n        </div>\n    )\n}\n\nexport default SendMessage;","import React from 'react';\n\nconst ChatDisplay = ({ users, messages }) =>{\n\n    const userList = Object.values(users).map((user) => \n        <li className=\"item-group-child\" key={user.name.toString()}>\n            <span className=\"user-name\">{user.name}</span>\n        </li>\n    );\n\n    const messageList = Object.values(messages).map((message) =>\n        <li className=\"item-group-child chat-message\" key={message.uId + message.timestamp}>\n            <div className=\"item-grid\">\n                <div className=\"user-info\">\n                    <span className=\"info-success\">{message.user.name}</span>\n                    <span className=\"info-danger\">{message.timestamp}</span>\n                </div>\n                <span className=\"user-message\">{message.message}</span>\n            </div>\n        </li>\n    );\n\n    return (\n        <div className=\"chat-area\">\n            <div>\n                <center><b>Users</b></center>\n                <ul className=\"item-group\">{ userList }</ul>\n            </div>\n            <div>\n                <center><b>Messages</b></center>\n                <ul className=\"item-group chat-group\">{ messageList }</ul>\n            </div>\n        </div>\n    )\n\n}\n\nexport default ChatDisplay;","import React from 'react';\nimport { fetchLogout } from './services';\n\nconst Logout = ({ onLogout, setError }) =>{\n\n    const doLogout = () =>{\n        fetchLogout()\n        .then(() => onLogout() )\n        .catch((err) =>{  \n            setError(err.error);\n        });\n    };\n\n    return (\n        <div className=\"logout\">\n            <button className=\"btn btn-logout\" onClick={ doLogout }>Logout</button>\n        </div>\n    )\n}\n\nexport default Logout;","import React, { useEffect, useState } from 'react';\nimport { fetchUsers, fetchMessages} from './services';\nimport SendMessage from './SendMessage';\nimport ChatDisplay from './ChatDisplay';\nimport Logout from './Logout';\n\nconst Chat = ({setUserState, setError }) =>{\n    const [users, setUsers] = useState([]);\n    const [messages, setMessages] = useState([]);\n\n    const getUsers = () =>{\n        fetchUsers()\n        .then(users =>{\n            setUsers(users);\n        })\n        .catch(err =>{\n            setError(err.error);\n        });\n    };\n\n    const getMessages = () => {\n        fetchMessages()\n        .then(messages =>{\n            setMessages(messages);\n        })\n        .catch(err =>{\n            setError(err.error);\n        });\n    };\n\n    const logout = ()=>{\n        setUserState({\n            isLoggedIn: false\n        });\n    };\n\n    const send = (messages) =>{\n        setMessages(messages);\n    };\n\n    useEffect(() => {\n        getUsers();\n        getMessages();\n        setError('');\n    }, []);\n\n    return (\n        <div className=\"chat\">\n            <Logout onLogout={ logout } setError={ setError }/>\n            <div className=\"message-area\">\n                <SendMessage onSend={ send } setError={ setError } setUserState = {setUserState}/>\n            </div> \n            <ChatDisplay users={ users } messages={ messages }/>\n        </div>\n\n    )\n}\n\nexport default Chat;","import React, {useState, useEffect } from 'react';\nimport './App.css';\nimport { fetchLoginStatus } from './services';\nimport Login from './Login';\nimport Chat from './Chat';\n\nconst App = () => {\n  const [userState, setUserState] = useState({ isLoggedIn: false});\n  const [error, setError] = useState('');\n\n  useEffect( () => {\n    fetchLoginStatus()\n    .then((username) =>{\n      setUserState({ \n        isLoggedIn: true,\n        username,\n      })\n    })\n  }, []);\n\n  const login = (username) =>{\n    setUserState({ \n      isLoggedIn: true,\n      username\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Welcome To OurChat!</h2>\n      </header>\n      <section>\n        <p className =\"info-danger\">{ error }</p>\n\n        {\n          userState.isLoggedIn && <Chat setUserState={ setUserState } setError={ setError }/> \n        }\n\n        {\n          !userState.isLoggedIn && <Login onLogin={ login } setError={ setError }/>  \n        }\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}